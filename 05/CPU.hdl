/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=opBit);
    Mux16(a=outALU, b=instruction, sel=opBit, out=outMux1);

    Or(a=opBit, b=instruction[5], out=intoA);
    ARegister(in=outMux1, load=intoA, out=outA, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=intoMux2);
    Mux16(a=outA, b=inM, sel=intoMux2, out=outMux2);

    ALU(x=outD, y=outMux2, zx=instruction[11],
    nx=instruction[10], zy=instruction[9], ny=instruction[8],
    f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[4], out=intoD);
    DRegister(in=outALU, load=intoD, out=outD);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=notNg, b=notZr, out=notNgAndZr);
    And(a=jgt, b=notNgAndZr, out=j1);

    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zr, out=j2);

    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ng, out=j3);

    Or(a=j1, b=j2, out=tJump);
    Or(a=j3, b=tJump, out=jump);

    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
